//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Scripts/Vlad/PlayerControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlls"",
    ""maps"": [
        {
            ""name"": ""PlayerGameProcess"",
            ""id"": ""7584ee0c-f3bd-4618-86d5-0fe4093d507e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""74383af8-62ad-4c0a-b0d2-9b4e167536a0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6e9cb110-3b0e-4177-afd3-c4a7e09b9ae8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f23b348-8103-4915-90f2-faee7334dc8c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26b7aee6-b482-44fb-9a23-2a45f3041c5d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerGameProcess
        m_PlayerGameProcess = asset.FindActionMap("PlayerGameProcess", throwIfNotFound: true);
        m_PlayerGameProcess_Move = m_PlayerGameProcess.FindAction("Move", throwIfNotFound: true);
        m_PlayerGameProcess_Look = m_PlayerGameProcess.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerGameProcess
    private readonly InputActionMap m_PlayerGameProcess;
    private IPlayerGameProcessActions m_PlayerGameProcessActionsCallbackInterface;
    private readonly InputAction m_PlayerGameProcess_Move;
    private readonly InputAction m_PlayerGameProcess_Look;
    public struct PlayerGameProcessActions
    {
        private @PlayerInputControlls m_Wrapper;
        public PlayerGameProcessActions(@PlayerInputControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerGameProcess_Move;
        public InputAction @Look => m_Wrapper.m_PlayerGameProcess_Look;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGameProcess; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGameProcessActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerGameProcessActions instance)
        {
            if (m_Wrapper.m_PlayerGameProcessActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerGameProcessActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerGameProcessActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerGameProcessActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayerGameProcessActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerGameProcessActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerGameProcessActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_PlayerGameProcessActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public PlayerGameProcessActions @PlayerGameProcess => new PlayerGameProcessActions(this);
    public interface IPlayerGameProcessActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
